name: CI/CD for ezinn-be

env:
  ENV_FILE: .env

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

permissions:
  contents: write
  deployments: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 'lts/*'

      - name: Install dependencies
        run: npm install

      - name: Inject environment variables
        run: echo "${{ secrets.ENV_FILE }}" > .env

      - name: Run tests
        run: npm run test

      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/ezinn-be:latest .

      - name: Log in to DockerHub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Push Docker image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/ezinn-be:latest .

      - name: Run deployment action in Jira
        uses: chrnorm/deployment-action@releases/v1
        with:
          environment: 'staging'
          token: ${{ secrets.GITHUB_TOKEN }}
          description: 'Deploying ezinn-be to staging via Docker'

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: SSH into VPS and pull latest Docker image
        uses: appleboy/ssh-action@v0.1.3
        with:
          host: ${{ secrets.VPS_IP }}
          username: ${{ secrets.VPS_USERNAME }}
          password: ${{ secrets.VPS_PASSWORD }}
          port: 22
          script: |
            docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
            docker pull ${{ secrets.DOCKER_USERNAME }}/ezinn-be:latest .
            docker stop ezinn-be || true
            docker rm ezinn-be || true
            docker run -d --name ezinn-be -p 4000:4000 ${{ secrets.DOCKER_USERNAME }}/ezinn-be:latest .

  cleanup:
    runs-on: ubuntu-latest
    if: always() # Run this job even if the build fails
    steps:
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Remove old Docker images from VPS
        uses: appleboy/ssh-action@v0.1.3
        with:
          host: ${{ secrets.VPS_IP }}
          username: ${{ secrets.VPS_USERNAME }}
          password: ${{ secrets.VPS_PASSWORD }}
          port: 22
          script: |
            docker image prune -f --filter "until=24h"

      - name: Remove old images from Docker Hub
        run: |
          images=$(docker images -q --filter "dangling=true")
          if [ -n "$images" ]; then
            docker rmi $images
          fi
